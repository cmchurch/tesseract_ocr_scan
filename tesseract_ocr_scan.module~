<?php
function tesseract_ocr_scan_menu() {
/*THIS FUNCTION HOOKS INTO drupal_menu TO ADD A TAB THAT DEFINES THE go_batch FUNCTION*/
	$items['node/%node/tesseract_ocr_scan'] = array(
	    'title' => 'Scan',
	    'access arguments' => array('access content'),
	    'page callback' => 'tesseract_ocr_scan_go_batch',
	    'page arguments' => array(1),
	    'type' => MENU_LOCAL_TASK,
	  );
	 return $items;
}



function tesseract_ocr_scan_go_batch($node) {
/*begins the batch job; each operation will loop until finished, 
then it will go onto the next one, passing values through $context['results']['KEY']*/
	 $batch = array(
	    'operations' => array(
				array('tesseract_ocr_scan_get_filepath', array($node)), //get node filepath
				array('tesseract_ocr_scan_convert_pdf',array()), //convert PDF to multiple JPGs
				array('tesseract_ocr_scan_scan',array()), //scan JPGs - iterative until done
				array('tesseract_ocr_scan_regex_clean',array()), //clean the scan results with REGEX
				array('tesseract_ocr_scan_update_node',array()) //save the node
			     ),
	    'finished' => 'tesseract_ocr_scan_batch_finished', //where to go after BATCH is done
	    'title' => t('Scanning............'), //title of batch page
	    'init_message' => t('Scan is starting.'), //message that says we're starting
	    'progress_message' => t('Operation @current out of @total.'), //inform user of how many operations we've finished
	    'error_message' => t('OCR Scan has encountered an error.'), //uh-oh, we have problems
 	 );

	batch_set($batch); //set and start the batch
	batch_process('node/'.$node->nid); //Where to go after the batch is done
}


function tesseract_ocr_scan_get_filepath($node,&$context) {
/*GET THE ABSOLUTE FILEPATH FOR THE ATTACHED PDF; 
     FILEPATH passed as $context['results']['filepath']
     REFERNCED NODE PASSED AS $context['results']['node']*/
		
	$file = file_load($node->field_file['und'][0]['fid']);
	$filepath = drupal_realpath($file->uri);
	$context['results']['filepath'] = $filepath;
	$context['results']['node']=$node;
	$context['message'] = "File Loaded: ".$filepath;
}

function tesseract_ocr_scan_convert_pdf(&$context) {
/*USE IMAGEMAGICK PHP (php5-imagick) TO CONVERT PDF TO MULTIPLE JPGS
PLANNED TO USE PNGS, BUT HAD ISSUES WITH ALPHA CHANNEL*/

	$filepath = $context['results']['filepath'];
	$convert_path = file_directory_temp() . "/tesseract_ocr_drupal/"; //our temp directory; will be deleted after the scan is complete
	
	if (!file_exists($convert_path)) { //create the temporary dir if doesn't exist
	    mkdir($convert_path, 0777, true);
	}
	$context['results']['temppath']=$convert_path; //pass the location of temp dir to the next operation

	/*USE IMAGICK TO CONVERT PDF TO JPG*/
	$im = new imagick();
	$im->setResolution(400,400);
	$im->readimage($filepath); 
	$im->setImageFormat('jpg');
	//$im->setImageAlphaChannel(Imagick::ALPHACHANNEL_OPAQUE);
	foreach($im as $i=>$image)	{ //break the PDF into multiple JPGS
		$im->writeImage($convert_path."page".$i.".jpg"); 
	}
	$im->clear(); 
	$im->destroy();
	
	$context['message'] = "PDF converted - note: OCR may take several minutes to complete.";
}

function tesseract_ocr_scan_scan(&$context) {
/*USE TESSERACT and SHELL_EXEC to OCR the JPGs generated by IMAGICK*/
	$temp_path = $context['results']['temppath']; //pull forward temp dir

	if (!isset($context['sandbox']['files'])) { //if we haven't started yet, init our files list and set counters
		$files = glob($temp_path.'*.jpg');
		$context['sandbox']['files']=$files;
		$context['sandbox']['progress'] = 0;
		$context['sandbox']['max']=count($files);
	}
	else { //if we are on an iteration, pull forward our files list
		$files = $context['sandbox']['files'];
	}
	
	$x = $context['sandbox']['progress']; //where are we in the $files array?
	$file = $files[$x]; //the current file we're scanning
	
	$cmd_scan = "tesseract ".$file." ".$file; //tesseract command = "tesseract infile outfile"
	shell_exec($cmd_scan); //execute the tesseract command

	$cmd_read="cat ".$file.".txt"; //print the tesseract results so we can capture them in a variable
	$scan=shell_exec($cmd_read); //print tesseract result and assign it to $scan

	$context['results']['scan'].=$scan; //add our scan results to the results
	$context['message']=$file." scanned.";
	$context['sandbox']['progress']++; //move ahead in the array

	//see if we are finished with the $file list yet; if not, let BATCH API know we need to keep going until we hit MAX
	if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
	    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
	}
	else
	{
		shell_exec("rm -r ".$temp_path); // if we are all done, remove the temp folder
	}

}


function tesseract_ocr_scan_regex_clean(&$context) {
/*REMOVES EXTRA NEWLINES and FIXES HYPHENS on SCAN RESULTS*/ 	
	$scan = $context['results']['scan'];

	//REMOVE ALL UNNECESSARY LINE BREAKS (Newlines followed by alphanumeric characters)	
	$scan = preg_replace("/\n(?=\w)/",' ',$scan);

	//REMOVE UNNECESSARY HYPHENATION (hyphens followed by spaces)
	$scan = preg_replace("/-\s(?=\w)/",'',$scan);

	$context['results']['scan'] = $scan; //update the scan results with the REGEX cleaned text
	$context['message']='Regex cleaning complete';
}

function tesseract_ocr_scan_update_node(&$context) {
/*SAVE THE SCAN RESULTS TO field_ocr_text*/
	$scan = $context['results']['scan']; //pull forward our final scan results
	$node = $context['results']['node']; //pull forward the node so we can update the "ocr_text" field (field_ocr_text)
	
	$node->field_ocr_text[$node->language][0]['value']= $scan; //set the drupal field to the scan results
	field_attach_update('node', $node); //update the field on the node and save it - alterative to node_save() that leaves timestamp and other fields along
}


function tesseract_ocr_scan_batch_finished($success,$results,$operations) {
/*LET THE USER KNOW WE FINISHED SUCCESSFULLY*/
	drupal_set_message("The OCR operation was successful. Scan results added to the field <i>ocr_text</i>");
}

?>
